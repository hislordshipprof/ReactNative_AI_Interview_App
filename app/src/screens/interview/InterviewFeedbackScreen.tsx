import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
  StatusBar,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import LogoComponent from '../../components/LogoComponent';

interface InterviewFeedbackScreenProps {
  navigation: any;
  route: any;
}

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

interface FeedbackItem {
  category: string;
  score: number;
  comment: string;
}

const InterviewFeedbackScreen: React.FC<InterviewFeedbackScreenProps> = ({ navigation, route }) => {
  const { 
    interviewType, 
    jobRole, 
    experienceLevel, 
    messages,
    duration,
    questionCount 
  } = route.params;
  
  const [isLoading, setIsLoading] = useState(true);
  const [overallScore, setOverallScore] = useState(0);
  const [feedback, setFeedback] = useState<FeedbackItem[]>([]);
  const [strengths, setStrengths] = useState<string[]>([]);
  const [improvements, setImprovements] = useState<string[]>([]);
  
  // Get interview type data (in a real app, fetch from API or context)
  const getInterviewTypeName = () => {
    const types = {
      '1': 'Full-Stack Dev Interview',
      '2': 'DevOps & Cloud Interview',
      '3': 'HR Screening Interview',
      '4': 'System Design Interview',
      '5': 'Business Analyst Interview',
      '6': 'Mobile App Dev Interview',
    };
    return types[interviewType as keyof typeof types] || 'Custom Interview';
  };
  
  // Format time
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs}s`;
  };
  
  // Generate feedback based on interview data
  useEffect(() => {
    const generateFeedback = async () => {
      // Simulate API call to generate feedback
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // In a real app, feedback would be generated by the backend based on AI analysis
      // For this demo, we'll generate some sample feedback
      
      // Random overall score between 60-95
      const score = Math.floor(Math.random() * 36) + 60;
      setOverallScore(score);
      
      setFeedback([
        {
          category: 'Technical Knowledge',
          score: Math.floor(Math.random() * 31) + 70,
          comment: 'Good understanding of core concepts but could improve on implementation details.'
        },
        {
          category: 'Communication',
          score: Math.floor(Math.random() * 21) + 75,
          comment: 'Clear communication with appropriate technical language. Could improve on explaining complex concepts more simply.'
        },
        {
          category: 'Problem-Solving',
          score: Math.floor(Math.random() * 26) + 70,
          comment: 'Demonstrated good problem-solving approach. Consider exploring multiple solutions before implementing.'
        },
        {
          category: 'Experience',
          score: Math.floor(Math.random() * 31) + 65,
          comment: 'Relevant experience shared, but could better connect past experiences to the role requirements.'
        },
      ]);
      
      setStrengths([
        'Strong knowledge of frontend frameworks and state management',
        'Clear communication of technical concepts',
        'Good understanding of software development lifecycle',
        'Proactive approach to problem-solving',
      ]);
      
      setImprovements([
        'Could improve on system design knowledge for scaling applications',
        'Explore more advanced testing strategies',
        'Deepen knowledge of cloud infrastructure and deployment options',
        'Work on explaining technical decisions with stronger business justifications',
      ]);
      
      setIsLoading(false);
    };
    
    generateFeedback();
  }, []);
  
  const getScoreColor = (score: number) => {
    if (score >= 90) return '#4CAF50';
    if (score >= 75) return '#8BC34A';
    if (score >= 60) return '#FFC107';
    if (score >= 40) return '#FF9800';
    return '#F44336';
  };
  
  const getScoreText = (score: number) => {
    if (score >= 90) return 'Excellent';
    if (score >= 75) return 'Good';
    if (score >= 60) return 'Satisfactory';
    if (score >= 40) return 'Needs Improvement';
    return 'Poor';
  };
  
  const handleSaveReport = () => {
    // In a real app, save the report to the user's account
    alert('Report saved to your account');
  };
  
  const handleReturnToDashboard = () => {
    navigation.navigate('Dashboard');
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#121212" />
      
      <View style={styles.header}>
        <LogoComponent size="small" />
        <Text style={styles.headerTitle}>Interview Feedback</Text>
      </View>
      
      {isLoading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2969FF" />
          <Text style={styles.loadingText}>Analyzing your interview responses...</Text>
        </View>
      ) : (
        <ScrollView style={styles.scrollContainer}>
          <View style={styles.summaryCard}>
            <Text style={styles.interviewTitle}>{getInterviewTypeName()}</Text>
            <Text style={styles.jobRole}>{jobRole} ({experienceLevel})</Text>
            
            <View style={styles.statsRow}>
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{formatTime(duration)}</Text>
                <Text style={styles.statLabel}>Duration</Text>
              </View>
              
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{questionCount}</Text>
                <Text style={styles.statLabel}>Questions</Text>
              </View>
              
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{messages.filter((m: Message) => m.sender === 'user').length}</Text>
                <Text style={styles.statLabel}>Responses</Text>
              </View>
            </View>
          </View>
          
          <View style={styles.scoreCard}>
            <View style={styles.overallScoreContainer}>
              <View style={[styles.scoreCircle, { borderColor: getScoreColor(overallScore) }]}>
                <Text style={[styles.scoreValue, { color: getScoreColor(overallScore) }]}>{overallScore}</Text>
              </View>
              <View style={styles.scoreTextContainer}>
                <Text style={styles.overallScoreLabel}>Overall Score</Text>
                <Text style={[styles.scoreRating, { color: getScoreColor(overallScore) }]}>
                  {getScoreText(overallScore)}
                </Text>
              </View>
            </View>
            
            <View style={styles.scoreBreakdown}>
              {feedback.map((item, index) => (
                <View key={index} style={styles.categoryRow}>
                  <View style={styles.categoryNameContainer}>
                    <Text style={styles.categoryName}>{item.category}</Text>
                  </View>
                  
                  <View style={styles.scoreBarContainer}>
                    <View 
                      style={[
                        styles.scoreBar, 
                        { 
                          width: `${item.score}%`, 
                          backgroundColor: getScoreColor(item.score)
                        }
                      ]} 
                    />
                  </View>
                  
                  <Text style={styles.categoryScore}>{item.score}</Text>
                </View>
              ))}
            </View>
          </View>
          
          <View style={styles.feedbackCard}>
            <Text style={styles.feedbackTitle}>Strengths</Text>
            
            {strengths.map((strength, index) => (
              <View key={index} style={styles.feedbackItem}>
                <View style={styles.bulletPoint} />
                <Text style={styles.feedbackText}>{strength}</Text>
              </View>
            ))}
            
            <Text style={[styles.feedbackTitle, styles.improvementTitle]}>Areas for Improvement</Text>
            
            {improvements.map((improvement, index) => (
              <View key={index} style={styles.feedbackItem}>
                <View style={styles.bulletPoint} />
                <Text style={styles.feedbackText}>{improvement}</Text>
              </View>
            ))}
          </View>
          
          <View style={styles.detailedFeedbackCard}>
            <Text style={styles.feedbackTitle}>Detailed Feedback</Text>
            
            {feedback.map((item, index) => (
              <View key={index} style={styles.detailedItem}>
                <Text style={styles.detailedItemTitle}>{item.category}</Text>
                <Text style={styles.detailedItemText}>{item.comment}</Text>
              </View>
            ))}
          </View>
          
          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.saveButton} onPress={handleSaveReport}>
              <Text style={styles.saveButtonText}>Save Report</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.dashboardButton} onPress={handleReturnToDashboard}>
              <Text style={styles.dashboardButtonText}>Return to Dashboard</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#2A2A2A',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginLeft: 8,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    color: '#fff',
    fontSize: 16,
    marginTop: 16,
  },
  scrollContainer: {
    flex: 1,
    padding: 16,
  },
  summaryCard: {
    backgroundColor: '#1A1A25',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  interviewTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 4,
  },
  jobRole: {
    fontSize: 16,
    color: '#B4B4B4',
    marginBottom: 16,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  statLabel: {
    fontSize: 14,
    color: '#B4B4B4',
    marginTop: 4,
  },
  scoreCard: {
    backgroundColor: '#1A1A25',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  overallScoreContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 24,
  },
  scoreCircle: {
    width: 80,
    height: 80,
    borderRadius: 40,
    borderWidth: 3,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  scoreValue: {
    fontSize: 28,
    fontWeight: 'bold',
  },
  scoreTextContainer: {
    flex: 1,
  },
  overallScoreLabel: {
    fontSize: 16,
    color: '#B4B4B4',
    marginBottom: 4,
  },
  scoreRating: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  scoreBreakdown: {
    marginTop: 8,
  },
  categoryRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  categoryNameContainer: {
    width: 130,
  },
  categoryName: {
    fontSize: 14,
    color: '#fff',
  },
  scoreBarContainer: {
    flex: 1,
    height: 12,
    backgroundColor: '#2A2A2A',
    borderRadius: 6,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  scoreBar: {
    height: '100%',
    borderRadius: 6,
  },
  categoryScore: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#fff',
    width: 30,
    textAlign: 'right',
  },
  feedbackCard: {
    backgroundColor: '#1A1A25',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  feedbackTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 16,
  },
  improvementTitle: {
    marginTop: 24,
  },
  feedbackItem: {
    flexDirection: 'row',
    marginBottom: 12,
  },
  bulletPoint: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#2969FF',
    marginTop: 6,
    marginRight: 8,
  },
  feedbackText: {
    flex: 1,
    fontSize: 16,
    color: '#fff',
    lineHeight: 22,
  },
  detailedFeedbackCard: {
    backgroundColor: '#1A1A25',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  detailedItem: {
    marginBottom: 16,
  },
  detailedItemTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 4,
  },
  detailedItemText: {
    fontSize: 16,
    color: '#B4B4B4',
    lineHeight: 22,
  },
  buttonContainer: {
    marginBottom: 32,
  },
  saveButton: {
    backgroundColor: '#2969FF',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  dashboardButton: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#2969FF',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },
  dashboardButtonText: {
    color: '#2969FF',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default InterviewFeedbackScreen; 